データベース 大量のデータを保存、管理するための仕組み
RDB　リレーショナルデータベース。データベースの仕組みの一種でテーブル単位でデータを管理する。
SQL　Structured Query Languageの略。RDBを扱う際に利用する言語。
DML文　データ操作言語(Data Manipulation Language)
DDL文　データ定義言語(Data Definition Language)
DCL文　データ制御言語(Data Control Language)
トランザクション制御　関連している複数の操作をまとめて実行するためのこと
テーブル　RDBにおいてデータを保存する方式



mySQLの実行（rootという名前、-pはパスワード認証がある）
mysql -u root -p;

データベースの作成（サンプルという名前のデータベース）
CREATE DATABASE sample;

データベースの使用（サンプルという名前のデータベース）
USE sample;

テーブル作成
CREATE TABLE members (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL DEFAULT "-",
  age INT NOT NULL DEFAULT "0"
);

------ employees 追加データ ---------

CREATE TABLE employees (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(16) NOT NULL DEFAULT "-",
  age INT NOT NULL DEFAULT "0",
  gender INT NOT NULL DEFAULT "-" 
);

INSERT INTO employees(name, age, gender) VALUES
("鈴木", "21", "m"),("佐藤", "38", "m"),("高橋", "28", "f"),("橋本", "30", "m"),
("田中", 201", "f"),("山田", "35", "m"),("山本", "27", "f");
--------------------------------------
既存のカラムの内容の変更
UPDATE athletes SET event_id = "3" WHERE athlete_id = 11;

既存のテーブルに新しいカラムを追加する
ALTER TABLE members ADD place_id INT; (membersテーブルにplace_id(INT型)カラムを追加する)

既存のテーブル内のカラムの属性を変更する
ALTER TABLE members MODIFY place_id INT NOT NULL DEFAULT "0"; 
(membersテーブル内のplace_id(INT型)をNOT NULLかつDEFAULT "0"に変更する )

データベースの削除
DROP DATABASE sample; (sampleを削除する）

テーブルの削除
DROP TABLE members; (membersを削除する)

レコードの削除
TRUNCATE TABLE members; (membersのレコードをすべて削除する)

カラムの削除
ALTER TABLE members DROP COLUMN age; (membersテーブル内のageをすべて削除する)

レコードの追加
INSERT INTO members(name, age) VALUES("中田英寿", 37);
INSERT INTO members(name, age) VALUES
("松井大輔", "28"),("城彰二","41"),("福西祟史","30"),("中村俊輔", 32);
INSERT INTO members(id, name, age) VALUES("1", "イチロー", 45);

INSERT INTO places(place_name) VALUES
("札幌"),("仙台"),("東京"),("大阪");

INSERT INTO members(place_id) VALUES

データベースからデータを取り出す（検索機能）
SELECT * FROM members; (*はすべてのフィールドを指定、すべて取り出す)
SELECT name FROM members; (nameを指定、nameのみ取り出す)
SELECT name, age FROM members WHERE gender = "m"; (genderがmであるデータをnameとageのみ取り出す)

SELECT * FROM members WHERE id = 2; (id = 2のデータを取り出す)

SELECT * FROM members WHERE age >= 30; (membersテーブル内のageが30以上のデータを取り出す)

SELECT * FROM members WHERE name LIKE "%中%"; 
(membersテーブル内のnameに"中"が含まれているデータを取り出す)

SELECT * FROM members WHERE name LIKE "%中%" AND age >= 35; 
(membersテーブル内のnameに"中"が含まれているデータでかつageが35以上のデータを取り出す)

SELECT * FROM members WHERE age BETWEEN 30 AND 39;
(membersテーブル内のageが30以上39以下のデータを取り出す)

SELECT * FROM members ORDER BY name DESC;
(membersテーブル内のすべてのデータをnameをの降順で表示する)

SELECT * FROM members WHERE age >= 30 ORDER BY age DESC;
(membersテーブル内のageが30以上のデータをnameをの降順で表示する)

SELECT  FROM members GROUP BY * WHERE 

SELECT gender, COUNT(*) FROM employees GROUP BY gender;
(employeesテーブル内のgenderカラム内のデータのCOUNT(個数)を表示する)

SELECT gender, COUNT(*) FROM employees GROUP BY gender HAVING COUNT(*) >= 4;
(employeesテーブル内のgenderカラム内のデータのCOUNT(個数)が4以上のデータを表示する)

SELECT gender, AVG(age) FROM employees GROUP BY gender;
(employeesテーブル内のgenderカラム内のそれぞれのageのAVG(平均値)を表示する)

UPDATEコマンドでデータの更新や変更ができる
UPDATE members SET name = "内田篤人" WHERE id = 4;(membersテーブル内のid="4"のnameを変更する)

DELETEコマンド（レコードの削除）
DELETE FROM members WHERE id = 3;(memberテーブル内のid = "4"のデータを削除する);

アクセス権の付与
GRANT ALL PRIVILEGES ON *.* TO "test"@"localhost" IDENTIFIED BY "password";
(testというuserにすべての権限(ALL)を付与する。パスワードは"password"となる)
(mysql起動時は mysql -u testuser -p 入力し、その後password画面にてpasswordと入力する)

GRANT ALL PRIVILEGES ON sample.* TO "test"@"localhost" IDENTIFIED BY "password";
(testというuserにデータベースsampleのすべての権限(ALL)を付与する。パスワードは"password"となる

REVOKE ALL PRIVILEGES, GRANT OPTION FROM "test"@"localhost";
(testというユーザーのすべてのアクセス権を削除する)

アクセス権を持つユーザーの確認（ログイン中のユーザー）
SHOW GRANTS;
SHOW GRANTS FOR "ユーザー名"@"localhost(ホスト名)"; (指定のユーザーのアクセス権を確認)

ユーザーの削除方法
DROP USER "ユーザー名"@"localhost(ホスト名)";
DROP USER "testuser"@"localhost";

------------------ DATABASE athletes --------------------------

CREATE TABLE athletes (
	athlete_id INT AUTO_INCREMENT,
	name1 VARCHAR(100),
	name2 VARCHAR(100),
	event_id VARCHAR(100),
	gender VARCHAR(10),
	PRIMARY KEY (athlete_id)
);

INSERT INTO athletes (athlete_id, name1, name2, event_id, gender) VALUES
	("1", "石川","遼","1","男"),
	("2", "イチロー","NULL","2","男"),
	("3", "浅田","真央","3","女"),
	("4", "宮里","藍","1","女"),
	("5", "本田","圭佑","1","女"),
	("6", "浅尾","美和","5","女"),
	("7", "ダルビッシュ","有","2","男"),
	("8", "福原","愛","6","女"),
	("9", "上村","愛子","7","女"),
	("10", "香川","真司","4","男"),
	("11", "荒川","静香","NULL","女")
;

CREATE TABLE events (
	event_id INT AUTO_INCREMENT,
	name VARCHAR(100),
	PRIMARY KEY(event_id)
);

INSERT INTO events (event_id, name) VALUES
	("1", "ゴルフ"),
	("2", "野球"),
	("3", "フィギュアスケート"),
	("4", "サッカー"),
	("5", "ビーチバレー"),
	("6", "卓球"),
	("7", "モーグル"),
	("8", "テニス")
;

CREATE TABLE incomes (
	income_id INT AUTO_INCREMENT,
	athlete_id INT(11),
	kind VARCHAR(50),
	money INT(11),
	PRIMARY KEY(income_id)
);


INSERT INTO incomes (income_id, athlete_id, kind, money) VALUES
    ( "1",  "1",  "prize",     "200" ),
    ( "2",  "1",  "cm",         "50" ),
    ( "3",  "1",  "sponsor", "200" ),
    ( "4",  "2",  "salary",    "500" ),
    ( "5",  "2",  "cm",        "100" ),
    ( "6",  "3",  "sponsor",   "50" ),
    ( "7",  "3",  "cm",          "90" ),
    ( "8",  "4",  "prize",      "180" ),
    ( "9",  "4",  "sponsor",  "120" ),
    ("10",  "4",  "cm",         "30" ),
    ("11",  "5",  "salary",   "300" ),
    ("12",  "5",  "sponsor",  "30" ),
    ("13",  "5",  "cm",         "30" ),
    ("14",  "6",  "salary",     "10" ),
    ("15",  "6",  "cm",         "70" ),
    ("16",  "7",  "salary",   "450" ),
    ("17",  "7",  "cm",       "120" ),
    ("18",  "8",  "salary",     "15" ),
    ("19",  "8",  "sponsor",  "50" ),
    ("20",  "9",  "salary",     "20" ),
    ("21", "10", "salary",    "400" ),
    ("22", "11", "salary",       "8" )
;

---------------------------------------------------------------
記述する順番
where -> group by	whereのあとにgroup byがくる
on -> where		onのあとにwhereがくる


外部結合

SELECT * FROM athletes, events;
SELECT * FROM athletes, events, incomes;
(athletesテーブルとeventテーブルを内部結合させ、全て表示する)※ただし全て表示するためなんの紐づけもない

SELECT * FROM athletes, events WHERE athletes.event_id = events.event_id;  ←どちらも
SELECT * FROM athletes JOIN events ON athletes.event_id = events.event_id; ←結果は同じ
(athletesテーブルをeventテーブルを内部結合させ、
	athletesテーブルのevent_idとeventsテーブルのevent_idで一致しているものを表示する)

SELECT * FROM athletes, events, incomes WHERE athletes.event_id = events.event_id AND athletes.athlete_id = incomes.athlete_id;
(複数条件 athletesテーブルとeventsテーブルのevent_idが一致
	かつathletesテーブルとincomesテーブルのathlete_idが一致しているもの)

一般的にはどっちのテーブルをベースにするか決めて、メインにするものを先に記述している。
（どちらを先に書いても結果は同じだが、出てくる順番などが少し変わる）

SELECT * FROM athletes a JOIN events e ON a.event_id = e.event_id;
(athletesテーブルをa、eventsテーブルをeとして内部結合させ、
	athletesテーブル(a)のevent_idとeventsテーブル(e)のevent_idで一致しているものを表示する)
(コードが長くなってしまうことがあるため、別名をつけることができる)

SELECT a.athlete_id, a.name1, a.name2, e.name FROM athletes a LEFT JOIN events e ON a.event_id = e.event_id;
(athleteテーブル(a)のathlete_id,name1,name2, 
	eventsテーブル(e)のnameを左側のテーブル(athletesテーブル)をベースにして外部結合して表示させる)
(そのため、値がNULLのものがあっても表示される)

SELECT a.athlete_id, a.name1, a.name2, e.name FROM athletes a RIGHT JOIN events e ON a.event_id = e.event_id;
(LEFT JOINの逆、右側のテーブル(eventsテーブル)をベースにして外部結合して表示させる）

SELECT * FROM athletes a LEFT JOIN incomes i ON a.athlete_id = i.athlete_id WHERE a.athlete_id = 1;
(LEFT JOINとWHERE組み合わせたもの)
(athletesテーブル(a)とincomesテーブル(i)を左側のテーブル(athletesテーブル)をベースにして外部結合し、
	かつ、athletesテーブル(a)のathlete_idが1のものを表示させる)

SELECT
	a.athlete_id,
	a.name1,
	a.name2,
	a.gender,
	i.income_id,
	i.kind,
	i.money
FROM
	athletes a
LEFT JOIN
	incomes i 
ON 
	a.athlete_id = i.athlete_id 
WHERE 
	a.athlete_id = 1
;
(項目が多いものなどは一行だと見づらい為、見やすいように改行して書くとよい)

サブクエリ

/* 1つずつ指定する方法 */
SELECT
	*
FROM
	athletes
WHERE
	athlete_id = 1 /* athlete_id = 1 */
OR /* or(または) */
	athlete_id = 2 /* athlete_id = 2 */
OR /* or(または) */
	athlete_id = 3 /* athlete_id = 3 */
;
 /* まとめて指定する方法 */
SELECT
	*
FROM
	athletes
WHERE 
	athlete_id IN(1,2,3) /* INを用いてathlete_idの1,2,3を指定 */
;

/* incomesテーブルでmoneyが300より大きいathlete_idと一致するathletesテーブルの全てを表示する */
SELECT
	* /* 全てのカラムを表示 */
FROM
	athletes /* athletesテーブルを指定 */
WHERE
	athlete_id IN(
		select /* icomesテーブルでmoneyが300より大きいathlete_idを表示する */
			athlete_id /* athlete_idを表示 */
		from incomes /* incomesテーブルを指定 */
		where money > 300 /* moneyが300より大きい */
	)
;

/* eventsテーブルでa.event_idとe_event_idが一致するものの名前を表示し、athletesテーブルのathlete_id,name1,name2を表示する */
SELECT
	a.athlete_id, /* a(athletesテーブル)のathlete_idを表示 */
	a.name1, /* a(athletesテーブル)のname1を表示 */
	a.name2, /* a(athletesテーブル)のname2を表示 */
	(SELECT /* eventテーブルの中でa(athletesテーブル)のevent_idとe(eventsテーブル)のevent_idが一致するもののnameを表示する */
		e.name /* e(eventsテーブル)のnameを指定 */
	FROM
		events e /* eventsテーブル(e)を指定 */
	WHERE
		a.event_id = e.event_id /* a(athleteテーブルのevent_idとe(eventsテーブル)のevent_idが一致するもの */
	)
FROM
	athletes a /* athletesテーブル(a)を指定 */
;

/* athletesテーブルをメインとしてincomesテーブルの中でkind = salary のデータを全て表示し、a.athlete_idとi.athlete_idが一致しているathletesテーブル(a)を全て表示、NULLのものを追加で表示する */
SELECT
	a.athlete_id,
	a.name1,
	a.name2,
	i.kind,
	i.money
FROM
	athletes a /* athletesテーブル(a)を指定 */
LEFT JOIN /* 左側(athletesテーブル)をメインとして */
	(SELECT /* incomesテーブルの中でkind = "salary"のデータを全て表示し、このテーブルをiとする */
		*
	FROM
		incomes
	WHERE
		kind = "salary"
	) i /* 上記のテーブルにi を指定 */
ON
	a.athlete_id = i.athlete_id
;


SELECT
	a.athlete_id,
	a.name1,
	a.name2
FROM
	athletes a
WHERE
	a.athlete_id
IN
	(SELECT
		athlete_id
	FROM
		incomes i
	GROUP BY
		i.athlete_id
	HAVING COUNT(i.income_id) >= 3
	)
;
（最初に指定したテーブルのカラムをサブクエリで指定した条件で表示させる）

SELECT
	a.athlete_id,
	a.name1,
	a.name2
FROM
	athletes a
LEFT JOIN
	(SELECT
		SUM(i.money)
	FROM
		incomes i
	GROUP BY
		i.athlete_id
	)
;

/* アスリート毎に収入を表示 */
SELECT
	a.athlete_id,
	a.name1,
	a.name2,
	i.kind,
	i.money
FROM
	athletes a
LEFT JOIN
	incomes i
ON
	a.athlete_id = i.athlete_id
;


/* 収入合計の最大 */	
select * from athletes a JOIN(
	select 
		athlete_id,SUM(money) as money
	from
		incomes
	GROUP BY 
		athlete_id
) j ON j.athlete_id = a.athlete_id
order by money DESC limit 1;

-------------------------------------------------------------------------------------
トランザクション処理

START TRANSACTION; /* トランザクション処理を開始する */

/* athletesテーブルの中で athlete_id が 11 のアスリートのevent_idを3にする */
UPDATE athletes SET event_id = "3" WHERE athlete_id = 11;

COMMIT; /* 処理を反映させる */
ROLLBACK; /* 処理をキャンセルし、元の状態に戻す */

-------------------------------------------------------------------------------------
インデックス

/* test 用 */
CREATE TABLE IF NOT EXISTS test (
  id bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  val int(11) NOT NULL,
  PRIMARY KEY (id)
) ;

DELIMITER //
create procedure insertTest(IN count INT, IN range_from INT, IN range_to INT)
begin
  declare counter int;
  set counter = 0;
  while counter < count do
    insert into test(val)values(
        floor(rand() * (range_to - range_from + 1) + range_from)
    );
    set counter = counter + 1;
  end while;
end//
DELIMITER ;

call insertTest(5000000,
 1, 10000);

インデックスの定義
CREATE INDEX (index名)(
	ON (テーブル名) (カラム名(長さ)) 
);


CREATE TABLE
	テーブル名(
		カラム定義,
		INDEX index名(カラム名(長さ))
	);

CREATE TABLE test(
	name VARCHAR(10),
	INDEX ind_n(name(3))
	);

SELECT COUNT(val) FROM test WHERE val = 500; /* testテーブルのval(カラム)が500の数(COUNT)を出力する */

CREATE INDEX val_ind ON test(val); /* testテーブルのval(カラム)にval_indというインデックスを定義する */

		
--------------------------------------------------------------------------------------

CREATE TABLE employees (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(16) NOT NULL DEFAULT "-",
  age INT NOT NULL DEFAULT "0",
  gender INT NOT NULL DEFAULT "-" 
);


CREATE TABLE store (
	store_id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(16),
	address VARCHAR(50),
	item_id INT,
	item_name VARHAR(50),
	category_id INT,
	price INT
	);
	

