package jp.sample4;

/* 多次元配列
 *  
 *  多次元配列の宣言
 * 		データの型[][] 配列名;
 * 			
 * 		int[][] test; 
 * 
 *  多次元配列の生成
 * 		配列名 = new データ型[行の要素数n][列の要素数m];
 * 		
 * 		test = new int[5][5];
 * 
 *  多次元配列の宣言と生成
 *  	データ型[][] 配列名 = new データ型[行の要素数n][列の要素数m] 
 * 		int[][] test = new int[5][5]; 
 * 
 *  配列に代入
 *  	配列名[インデックス] = 値;
 *  	test[0] = 1; test[1] = 2; test[2] = 3 ...
 *  		インデックスは0から始め決めた要素数n-1, m-1 まで代入できる。要素nなど超えて代入することはできない。
 *  
 *  
 *  多次元配列の宣言、生成、代入
 *  	データ型[][] 配列名 = {
 *  							{初期値1, 初期値2, ･･･},
 *  							{初期値3, 初期値4, ･･･}
 *  							};
 *  
 *  	int[][] test = {
 *  					{1, 2, ...},
 *  					{3, 4, ...}
 *  					};
 *  	
 * 多次元配列の要素数
 * 		配列名.length
 * 		test.length
 * 
 * 		配列名[n].length
 * 		test[0].length
 * 
 * 		配列の要素数は配列の長さとも呼ばれ、
 * 		繰り返し文でよく用いられ、後々要素数を増やしても繰り返し文の条件式で.lengthを使用していると変更する必要がなくなる。
 * 
 * 		要素数 5										要素数 6 に変更
 * 		for(int i = 0; i < 5; i++)			⇒			for(int i = 0; i < 6; i++)
 * 		for(int i = 0; array.length; i++)	⇒			for(int i = 0; array.length; i++)
 * 						↑array(配列)のlength(要素数)なので自動的に配列の数になるため変更がいらない。
 */

public class Sample4_2 {
	public static void main(String[] args) {
		
		int[][] array = new int[2][3]; // 多次元配列 array の宣言（データ型 int で 要素数は5つ）
		
						 //配列の初期化								  イメージ
		array[0][0] = 1; // array[0][0] に代入		-----------------------------------------------	
		array[0][2] = 3; // array[0][2] に代入		|		|	 [0]    |	  [1]    |    [2]     |
		array[1][0] = 4; // array[1][0] に代入		-----------------------------------------------
		array[1][1] = 5; // array[1][1] に代入		|  [0]  |     1		|	   2 	 |     3      |
		array[1][2] = 6; // array[1][2] に代入		-----------------------------------------------
						 //				 		    |  [1]  |     4     |      5     |     6      |
						//							-----------------------------------------------
		for (int i = 0; i < array.length; i++) {
			for (int j = 0; j < array[i].length; j++) {
				System.out.println("array[" + i + "][" + j + "] = " + array[i][j]);
			}
		}
	}	
}