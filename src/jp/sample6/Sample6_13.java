package jp.sample6;

/* 型変換
 * 	基本データ型とオブジェクト参照型は型変換することが出来る。
 * 	変換方法は　暗黙的な型変換　と　明示的な型変換(キャスト)がある。
 * 	
 * 	暗黙的な型変換　⇒　Javaの実行環境が無難な型変換を行う
 * 	基本データ型では、データの格納領域が広いほうへ型変換する。
 * 	オブジェクト参照型では、継承関係または実装関係のもののみ型変換を行う
 * 
 * 	明示的な型変換(キャスト)　⇒　強制的に型変換させること
 * 	基本的には暗黙的な型変換の逆を行う。
 * 	基本データ型では、データの格納領域が狭いほうへ行う。
 * 
 * 	⇒⇒⇒　	暗黙的な型変換　	⇒⇒⇒
 * 
 * 	byte < short, char < int < long < float < double
 * 
 * 	←←←　明示的な型変換(キャスト)　←←←
 * 
 * 基本データ型の型変換
 * 	基本型の型変換には拡大変換のルールで行われる。
 * 	Java実行環境がデータ格納領域がより広い型への変換を要求したときに、暗黙的な型変換が行われる。
 * 	その為、下から上への暗黙の変換はできずコンパイルエラーとなる。
 * 		（大きい箱に移し替えるようなイメージ）
 * 
 * 基本データ型のキャスト
 * 	キャストは明示的に型の変換を行う。その為、暗黙的な型変換では不可能だった変換が可能となる。
 * キャストの型変換はキャスト演算子を用いて、構文は以下の通りとなる。
 * 
 * 	(変換したい型) 変換元の変数;
 * 
 * 	暗黙的な型変換では、格納領域が大きい方へ型変換を行っていたが、キャストでは格納領域が大きい方から小さい方へ変換する。
 * 	その為、データによっては溢れてしまう。 
 * 
 */



public class Sample6_13 {
	public static void main(String[] args) {
		int i = 10;
		double d = 2.5;
		int num = 4;
		
		short shortInt = (short) i;
		System.out.println("int → short : " + shortInt);
		
		int intDouble = (int) d;
		System.out.println("double → int : " + intDouble);
		
		d = (double) i / num; // i (int型) と num (int型) の計算ではint型を用いて計算を行うことになる為、
							  //double型に型変換して計算しなければ小数点以下の数字が切り捨てられてしまう。( d (double型)に代入するだけでは不可)
		
		System.out.println(d);
		
	}
}