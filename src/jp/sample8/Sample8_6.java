package jp.sample8;

/* ラムダ式の省略記法
 * 
 * 	(引数の型名 抽象メソッドの引数名) -> {
 * 		return 戻り値;
 * 	}
 * 
 * 	上記のラムダ式の場合引数の型名を省略することが可能
 * 
 * 	(抽象メソッドの引数名) -> {
 * 		return 戻り値;
 * 	}
 * 
 * 	引数の型名は省略することが出来るため、省略されている。ただし、引数が2つ以上ある場合は
 * 	一部の引数の型名のみ省略することは出来ない。省略する場合は、すべての引数の型名を省略しなければならない。
 * 
 * 		エラー
 * 		
 * 		(int a, b) -> { // a の型名を省略せず、b の型名を省略しているためエラーとなる
 * 			//処理内容;
 * 		}
 * 
 * 	他にも以下のような省略も可能
 * 		処理内容がreturn文のみ場合、 { } と returnキーワードを同時に省略してもよい
 * 
 * 		(抽象メソッドの引数名) -> 戻り値;
 * 
 * 		注意点として処理がreturn文だけの場合でもreturnキーワードだけを省略したり { } だけを省略することは出来ない。
 * 		省略を行う場合、必ず { } と return の両方を省略する必要がある。
 * 
 * 		return文がないためエラー
 * 
 * 		(抽象メソッドの引数名) -> {
 * 			戻り値;
 * 		}
 * 	
 * 		処理内容がreturn文のみの場合でも{ } だけを省略することは出来ない。
 * 		return があるためエラー
 * 
 * 		(抽象メソッドの引数名) -> return 戻り値;
 * 
 * 	戻り値がない場合(戻り値がvoidの場合)はreturn文を省略できる
 * 
 * 		(抽象メソッドの引数名) -> {
 * 			処理内容;
 * 		}
 * 
 * 		抽象メソッドの処理内容が1行だけの場合 { }は省略してもよい
 * 
 * 		(抽象メソッドの引数名) -> 処理内容;
 * 
 * 		引数が1つだけの場合、引数の部分の()は省略してもよい。その場合、型名は必ず省略する。
 * 		(ただし、引数が2つ以上の場合や引数がない場合 () の省略は出来ない。)
 * 
 * 		抽象メソッドの引数名 -> {
 * 			処理内容;
 * 		}
 * 
 * 		引数が2つ以上の場合エラーとなる
 * 
 * 		a, b -> {
 * 			//処理内容;
 * 		}
 * 
 * 		()を省略した場合、型名を書くことは出来ないためエラーとなる
 * 
 * 		int a -> {
 * 			//処理内容
 * 		}
 */

public class Sample8_6 {
	public static void main(String[] args) {	
		
	}
}